name: iOS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [ labeled, synchronize, opened, reopened ]

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

jobs:
  build:
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'iOS'))  
    runs-on: macos-12

    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-
    - name: Brew bundle
      run: brew bundle
    - name: Bundle install
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.65
        profile: minimal
        override: true

    - name: Install targets
      run: |
        rustup target add aarch64-apple-ios
        rustup target add aarch64-apple-ios-sim
        rustup target add x86_64-apple-ios

    - name: Set XCode 14.2
      run: sudo xcode-select -switch /Applications/Xcode_14.2.app

    - name: Build framework & bindings
      run: make ios

    - name: Tests
      working-directory: platforms/ios/example
      run: exec ./ios-tests.sh

    - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: get_branch

    - run: bundle exec slather
      env:
        GIT_BRANCH: ${{ steps.get_branch.outputs.branch }}
        CI_PULL_REQUEST: ${{ github.event.number }}
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true
        flags: unittests-ios, unittests
