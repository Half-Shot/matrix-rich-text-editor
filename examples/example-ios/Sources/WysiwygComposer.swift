// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(WysiwygComposerFFI)
import WysiwygComposerFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_wysiwyg_composer_f61a_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_wysiwyg_composer_f61a_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
fileprivate class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        self.offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset..<offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value, { data.copyBytes(to: $0, from: range)})
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> Array<UInt8> {
        let range = offset..<(offset+count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer({ buffer in
            data.copyBytes(to: buffer, from: range)
        })
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
fileprivate class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        self.bytes = []
        self.offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
          let writer = Writer()
          write(value, into: writer)
          return RustBuffer(bytes: writer.bytes)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    static func read(from buf: Reader) throws -> UInt32 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}


public protocol ComposerActionProtocol {
    func actionId()  -> String
    func action()  -> ActionRequest
    
}

public class ComposerAction: ComposerActionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_wysiwyg_composer_f61a_ComposerAction_object_free(pointer, $0) }
    }

    

    
    public func actionId()  -> String {
        return try! FfiConverterString.lift(
            try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerAction_action_id(self.pointer, $0
    )
}
        )
    }
    public func action()  -> ActionRequest {
        return try! FfiConverterTypeActionRequest.lift(
            try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerAction_action(self.pointer, $0
    )
}
        )
    }
    
}


fileprivate struct FfiConverterTypeComposerAction: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ComposerAction

    static func read(from buf: Reader) throws -> ComposerAction {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: ComposerAction, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ComposerAction {
        return ComposerAction(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: ComposerAction) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public protocol ComposerModelProtocol {
    func select(startCodepoint: UInt32, endCodepoint: UInt32) 
    func replaceText(newText: String)  -> ComposerUpdate
    func backspace()  -> ComposerUpdate
    func delete()  -> ComposerUpdate
    func actionResponse(actionId: String, response: ActionResponse)  -> ComposerUpdate
    
}

public class ComposerModel: ComposerModelProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_wysiwyg_composer_f61a_ComposerModel_object_free(pointer, $0) }
    }

    

    
    public func select(startCodepoint: UInt32, endCodepoint: UInt32)  {
        try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerModel_select(self.pointer, 
        FfiConverterUInt32.lower(startCodepoint), 
        FfiConverterUInt32.lower(endCodepoint), $0
    )
}
    }
    public func replaceText(newText: String)  -> ComposerUpdate {
        return try! FfiConverterTypeComposerUpdate.lift(
            try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerModel_replace_text(self.pointer, 
        FfiConverterString.lower(newText), $0
    )
}
        )
    }
    public func backspace()  -> ComposerUpdate {
        return try! FfiConverterTypeComposerUpdate.lift(
            try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerModel_backspace(self.pointer, $0
    )
}
        )
    }
    public func delete()  -> ComposerUpdate {
        return try! FfiConverterTypeComposerUpdate.lift(
            try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerModel_delete(self.pointer, $0
    )
}
        )
    }
    public func actionResponse(actionId: String, response: ActionResponse)  -> ComposerUpdate {
        return try! FfiConverterTypeComposerUpdate.lift(
            try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerModel_action_response(self.pointer, 
        FfiConverterString.lower(actionId), 
        FfiConverterTypeActionResponse.lower(response), $0
    )
}
        )
    }
    
}


fileprivate struct FfiConverterTypeComposerModel: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ComposerModel

    static func read(from buf: Reader) throws -> ComposerModel {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: ComposerModel, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ComposerModel {
        return ComposerModel(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: ComposerModel) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public protocol ComposerUpdateProtocol {
    func textUpdate()  -> TextUpdate
    func menuState()  -> MenuState
    func actions()  -> [ComposerAction]
    
}

public class ComposerUpdate: ComposerUpdateProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_wysiwyg_composer_f61a_ComposerUpdate_object_free(pointer, $0) }
    }

    

    
    public func textUpdate()  -> TextUpdate {
        return try! FfiConverterTypeTextUpdate.lift(
            try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerUpdate_text_update(self.pointer, $0
    )
}
        )
    }
    public func menuState()  -> MenuState {
        return try! FfiConverterTypeMenuState.lift(
            try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerUpdate_menu_state(self.pointer, $0
    )
}
        )
    }
    public func actions()  -> [ComposerAction] {
        return try! FfiConverterSequenceTypeComposerAction.lift(
            try!
    rustCall() {
    
    wysiwyg_composer_f61a_ComposerUpdate_actions(self.pointer, $0
    )
}
        )
    }
    
}


fileprivate struct FfiConverterTypeComposerUpdate: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ComposerUpdate

    static func read(from buf: Reader) throws -> ComposerUpdate {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: ComposerUpdate, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ComposerUpdate {
        return ComposerUpdate(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: ComposerUpdate) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ActionRequest {
    
    case dummy
}

fileprivate struct FfiConverterTypeActionRequest: FfiConverterRustBuffer {
    typealias SwiftType = ActionRequest

    static func read(from buf: Reader) throws -> ActionRequest {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .dummy
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: ActionRequest, into buf: Writer) {
        switch value {
        
        
        case .dummy:
            buf.writeInt(Int32(1))
        
        }
    }
}


extension ActionRequest: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ActionResponse {
    
    case dummy
}

fileprivate struct FfiConverterTypeActionResponse: FfiConverterRustBuffer {
    typealias SwiftType = ActionResponse

    static func read(from buf: Reader) throws -> ActionResponse {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .dummy
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: ActionResponse, into buf: Writer) {
        switch value {
        
        
        case .dummy:
            buf.writeInt(Int32(1))
        
        }
    }
}


extension ActionResponse: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MenuState {
    
    case none
}

fileprivate struct FfiConverterTypeMenuState: FfiConverterRustBuffer {
    typealias SwiftType = MenuState

    static func read(from buf: Reader) throws -> MenuState {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .none
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: MenuState, into buf: Writer) {
        switch value {
        
        
        case .none:
            buf.writeInt(Int32(1))
        
        }
    }
}


extension MenuState: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TextUpdate {
    
    case keep
    case replaceAll(replacementHtml: String, selectionStartCodepoint: UInt32, selectionEndCodepoint: UInt32)
}

fileprivate struct FfiConverterTypeTextUpdate: FfiConverterRustBuffer {
    typealias SwiftType = TextUpdate

    static func read(from buf: Reader) throws -> TextUpdate {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .keep
        
        case 2: return .replaceAll(
            replacementHtml: try FfiConverterString.read(from: buf), 
            selectionStartCodepoint: try FfiConverterUInt32.read(from: buf), 
            selectionEndCodepoint: try FfiConverterUInt32.read(from: buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: TextUpdate, into buf: Writer) {
        switch value {
        
        
        case .keep:
            buf.writeInt(Int32(1))
        
        
        case let .replaceAll(replacementHtml,selectionStartCodepoint,selectionEndCodepoint):
            buf.writeInt(Int32(2))
            FfiConverterString.write(replacementHtml, into: buf)
            FfiConverterUInt32.write(selectionStartCodepoint, into: buf)
            FfiConverterUInt32.write(selectionEndCodepoint, into: buf)
            
        }
    }
}


extension TextUpdate: Equatable, Hashable {}


fileprivate struct FfiConverterSequenceTypeComposerAction: FfiConverterRustBuffer {
    typealias SwiftType = [ComposerAction]

    static func write(_ value: [ComposerAction], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeComposerAction.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [ComposerAction] {
        let len: Int32 = try buf.readInt()
        var seq = [ComposerAction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeComposerAction.read(from: buf))
        }
        return seq
    }
}

public func newComposerModel()  -> ComposerModel {
    return try! FfiConverterTypeComposerModel.lift(
        try!
    
    rustCall() {
    
    wysiwyg_composer_f61a_new_composer_model($0)
}
    )
}



/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum WysiwygComposerLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}